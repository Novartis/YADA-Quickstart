# IZPACK properties
# configs

# 'app.home' is the path to the directory containing many of YADA's
# filesystem touchpoints. It is written to the 'context.xml' file
# during the build, and a critical path to support both yada i/o and
# the plugin api.

# The 'env' variable enables colocation of multiple instances on one server.
# If you don't require that, you can just remove it, or you can softlink
# your the env name to the value, e.g., 'ln -s /apps/yada /apps/yada/local'
#app.home=${app.home}

# 'out.base' The base directory for yada i/o output.
# The value is written to context.xml
#out.base=${app.home}/files/out

# 'in.base' The base directory for yada i/o uploads.
# The value is written to context.xml
#in.base=${app.home}/files/in

# YADA index

# These are the default settings transferred to context.xml. Example settings
# for other RDBMS's can be found in the src at
# YADA/yada-api/src/main/resources/conf/build.properties

# 'YADA.index.adaptor' is the FQDN of the YADA class used to process YADA
# requests. The default is hypersql. Other options include, in the
# com.novartis.opensource.yada.adaptor package:
# MySQLAdaptor, PostgreSQLAdaptor, SQLiteAdaptor, and OracleAdaptor
YADA.index.adaptor=com.novartis.opensource.yada.adaptor.HSQLdbAdaptor

# The next five properties are simply passthroughs for the Resource
# configuration in context.xml for the YADA index.

# 'YADA.index.url' is the url for connecting via jdbc to the YADA index
# database. Again, the default is hypersql, and specifically the database 
# populated by the scripts shipped with distribution. 
# This database is installed at the root of the webapp
# during the build to facilitate quickstart.  If you rebuild with maven, perhaps
# obviously, it will be overwritten. If you wish to continue using the
# provided database, it is necessary to temporarily copy it to another location
# outside of the warfile's purview.  You can then move the hypersql artifacts back
# to the web application folder.  Alternatively, you can change the 
# path to the db. Preferably, you will 
#  - move the db out of the warfile's purview 
#  - set up a HyperSqL 'sqltool.rc' file
#  - launch the HyperSQL server process separately
#  - connect with a 'jdbc:hsqldb:hsql' url instead
#  See http://hsqldb.org/doc/2.0/guide/running-chapt.html for more info.
YADA.index.url=jdbc:hsqldb:file:${app.home}/${YADA.local.tomcat.home}/webapps/${project.artifactId}-${project.version}/YADADB

# 'yada.index.validationQuery' is a common JDBC setting to facilitate
# connection pooling. The query can be different, and must be depending on
# choice of database engine.
YADA.index.validationQuery=select 1 as COL1

# 'yada.index.driverClassName' is the FQDN of the engine's JDBC driver.
YADA.index.driverClassName=org.hsqldb.jdbc.JDBCDriver

# 'yada.index.autoCommit' defines the persistence behavior of the driver.
YADA.index.autoCommit=false

# 'yada.index.username' is the db account name used for db connections. 
YADA.index.username=YADA

# 'yada.index.password' is the db account password used for db connections.
# Obviously this should be changed
YADA.index.password=yada


# deployment properties
# These properties are useful only if you want to automate deployment
# via maven or another method using the included 'deploy.sh' script

# 'user' the local username
user=${env.YADA_USER}

# 'user.home' the local user's home directory
user.home=/home/${user}

# 'keyfile' the location of the user's private key for connecting to the
# remote server
keyfile=${env.YADA_DEPLOY_KEYFILE}

# 'deploy.host' the host to which to deploy the file
deploy.host=localhost

# 'deploy.port' the port on which tomcat is listening
deploy.port=8080

# 'deploy.user' the deployment app login, i.e., psi-probe or tomcat-mgr user
#deploy.user=

# 'deploy.pass' the deployment app password
#deploy.pass=

# 'deploy.url' the deployment app url for automated deployment
#deploy.url=

# 'deploy.unix.user' the owner of the tomcat process on the server
deploy.unix.user=${user}

# 'deploy.app.base' the remote $YADA_HOME
deploy.app.base=/apps/yada


# war test properties (inludes some api-test props)
# these properties are probably only useful if you're running
# integration tests after deployment

# 'YADA.user' the name of the user for authenticated proxy
YADA.user=${env.YADA_USER}

# 'YADA.pass' the password of the user for authenticated proxy
YADA.pass=${env.YADA_PASS}

# 'YADA.proxy' the proxy server address or FQHN
YADA.proxy=${env.YADA_PROXY}

# 'YADA.auth.host' if your service is behind an authentication gateway
# it may require a different url than non-authenticated requests
YADA.auth.host=

# 'YADA.auth.uri' if your service is behind an authentication gateway
# it may require a different path to the 'yada.jsp' resource
YADA.auth.uri=

# 'YADA.auth.auth' set to 'true' to enable authenticated request testing
YADA.auth.auth=

# 'YADA.noauth.host' use for non-authenticated request testing
YADA.noauth.host=localhost:8080

# 'YADA.noauth.uri' use for non-authenticated request testing
YADA.noauth.uri=/yada.jsp

# 'YADA.noauth.auth' keep at 'false' to use for non-authenticated request
# testing
YADA.noauth.auth=false
